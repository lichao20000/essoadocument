<?php

/**
 * 文档收集范围
 * @author xuekun
 *
 */
class ProxyEsdocumentDocumentStage extends AgentProxyAbstract {
	const SERVICE_NAME = "documentStage";
	
	/**
	 *
	 * xuekun
	 *
	 * @param unknown $params        	
	 */
	public function addData($params) {
		$urlParam = array (
				'add' 
		);
		$url = implode ( '/', $urlParam );
		return $this->post ( self::SERVICE_NAME, $url, $params, 'application/json;charset=UTF-8' );
	}
	
	/**
	 *
	 * xuekun
	 *
	 * @param
	 *        	unknown ids
	 */
	public function deleteData($ids) {
		$userId = $this->getUserId();
		$ip = $_SERVER['REMOTE_ADDR'];
		$urlParam = array (
				'delete',
				$userId,
				$ip
		);
		$url = implode ( '/', $urlParam );
		return $this->post ( self::SERVICE_NAME, $url, $ids, 'application/json;charset=UTF-8' );
	}
	
	/**
	 *
	 * xuekun
	 *
	 * @param
	 *        	unknown params
	 * @return return_type
	 */
	public function updateData($params) {
		$urlParam = array (
				'update' 
		);
		$url = implode ( '/', $urlParam );
		return $this->post ( self::SERVICE_NAME, $url, $params, 'application/json;charset=UTF-8' );
	}
	
	/**
	 * 分页获取 文档收集范围 信息列表
	 * xuekun
	 *
	 * @param unknown $params        	
	 * @return return_type
	 */
	public function getDataList($page, $rp, $params) {
		$urlParam = array (
				'list',
				$page,
				$rp 
		);
		$url = implode ( '/', $urlParam );
		return $this->post ( self::SERVICE_NAME, $url, $params, 'application/json;charset=UTF-8' );
	}
	
	/**
	 * 获得文档收集范围 树形结构
	 * xuekun
	 */
	public function getTree($isnode = -1, $pId = 0) {
		$urlParam = array (
				'getTree',
				$isnode,
				$pId 
		);
		$url = implode ( '/', $urlParam );
		return $this->get ( self::SERVICE_NAME, $url );
	}
	/**
	 *
	 * @param unknown $params        	
	 */
	public function getCount($params) {
		$urlParam = array (
				'count' 
		);
		$url = implode ( '/', $urlParam );
		return $this->post ( self::SERVICE_NAME, $url, $params, 'application/json;charset=UTF-8' );
	}
	public function getData($id) {
		$urlParam = array (
				'get',
				$id 
		);
		$url = implode ( '/', $urlParam );
		return $this->get ( self::SERVICE_NAME, $url );
	}
	
	//-----------------导入导出-----------------------
	public function exportSelData($params) {
		$urlParam = array (
				'exportSelData'
		);
		$url = implode ( '/', $urlParam );
		return $this->post ( self::SERVICE_NAME, $url, $params, 'application/json;charset=UTF-8' );
	}
	public function getFieldsByTreetype($params) {
		$urlParam = array (
				'getFieldsByTreetype'
		);
		$url = implode ( '/', $urlParam );
		return $this->post ( self::SERVICE_NAME, $url, $params, 'application/json;charset=UTF-8' );
	}
	public function exportFilterData($params) {
		$urlParam = array (
				'exportFilterData'
		);
		$url = implode ( '/', $urlParam );
		return $this->post ( self::SERVICE_NAME, $url, $params, 'application/json;charset=UTF-8' );
	}
	/**
	 * 获取导入上传功能rest服务地址
	 */
	public function getImportUrl() {
		$urlParam = array (
				'importUpload'
		);
		$url = implode ( '/', $urlParam );
		$restUrl = $this->getUri ( self::SERVICE_NAME, $url );
		return $restUrl;
	}
	/**
	 * 获取文件头信息
	 */
	public function showFileColumn($map) {
		$urlParam = array (
				'showFileColumn'
		);
		$url = implode ( '/', $urlParam );
		return $this->post ( self::SERVICE_NAME, $url, $map, "application/json;charset=UTF-8" );
	}
	
	/**
	 * 获取上传文件的结构信息,导入数据第二步标签页用到.
	 */
	public function getImportStructures($userId){
		$urlParam=array('getImportStructures',$userId);
		$url=implode('/',$urlParam);
		return $this->get(self::SERVICE_NAME,$url);
	}
	
	
	
	/**
	 * 获取结构信息
	 * wanghongchen 20140506
	 */
	public function showStructureColumn($map){
		$urlParam=array('showStructureColumn');
		$url=implode('/',$urlParam);
		return $this->post(self::SERVICE_NAME, $url, $map, "application/json;charset=UTF-8");
	}
	
	/**
	 * 获取结构信息
	 * wanghongchen 20140506
	 */
	public function getFileColumnModel($map){
		$urlParam=array('getFileColumnModel');
		$url=implode('/',$urlParam);
		return $this->post(self::SERVICE_NAME, $url, $map, "application/json;charset=UTF-8");
	}
	
	/**
	 * 获取文件前20条数据，提供预览
	 * @author wanghongchen 20140506
	 */
	public function getPreFileData($map){
		$urlParam=array('getPreFileData');
		$url=implode('/',$urlParam);
		return $this->post(self::SERVICE_NAME, $url, $map, "application/json;charset=UTF-8");
	}
	
	/**
	 * 向数据库写入导入数据
	 * @author wanghongchen 20140508
	 */
	public function realImport($userId, $map){
		$urlParam=array('realImport',$userId);
		$url=implode('/',$urlParam);
		return $this->post(self::SERVICE_NAME, $url, $map, "application/json;charset=UTF-8");
	}
	//-------------导入导出 end-------------------------------------------------
	
	/**
	 * 验证收集范围代码唯一性
	 * @param unknown $code
	 */
	public function uniqueCode($code){
		$urlParam=array('uniqueCode',$code);
		$url=implode('/',$urlParam);
		return $this->get(self::SERVICE_NAME, $url);
	}
	
	/**
	 * 验证收集范围名称唯一性
	 * @param unknown $stage
	 */
	public function uniqueName($stage){
		$urlParam=array('uniqueName');
		$url=implode('/',$urlParam);
		return $this->post(self::SERVICE_NAME, $url, json_encode($stage), "application/json;charset=UTF-8");
	}
}