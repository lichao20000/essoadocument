<?php

/**
 * 装置单元号维护
 * @author xuekun
 *
 */
class ProxyEsdocumentDevice extends AgentProxyAbstract {
	const SERVICE_NAME = "device";
	
	/**
	 *
	 * xuekun
	 *
	 * @param unknown $device        	
	 */
	public function addDevice($device) {
		$urlParam = array (
				'add' 
		);
		$url = implode ( '/', $urlParam );
		return $this->post ( self::SERVICE_NAME, $url, $device, 'application/json;charset=UTF-8' );
	}
	
	/**
	 *
	 * xuekun
	 *
	 * @param unknown $device        	
	 */
	public function deleteDevice($param) {
		$userId = $this->getUserId();
		$ip = $_SERVER['REMOTE_ADDR'];
		$urlParam = array (
				'delete',
				$userId,
				$ip
		);
		$url = implode ( '/', $urlParam );
		return $this->post ( self::SERVICE_NAME, $url, $param, 'application/json;charset=UTF-8' );
	}
	
	/**
	 *
	 * xuekun
	 *
	 * @param unknown $device        	
	 * @return return_type
	 */
	public function updateDevice($device) {
		$urlParam = array (
				'update' 
		);
		$url = implode ( '/', $urlParam );
		return $this->post ( self::SERVICE_NAME, $url, $device, 'application/json;charset=UTF-8' );
	}
	
	/**
	 * 分页获取 装置单元 信息列表
	 * xuekun
	 *
	 * @param unknown $params        	
	 * @return return_type
	 */
	public function getDeviceList($page, $rp, $params) {
		$urlParam = array (
				'list',
				$page,
				$rp 
		);
		$url = implode ( '/', $urlParam );
		return $this->post ( self::SERVICE_NAME, $url, $params, 'application/json;charset=UTF-8' );
	}
	
	/**
	 * 获得 装置单元 树形结构
	 * xuekun
	 *
	 * @param unknown $pId        	
	 */
	public function getTree($maxLevel = 0) {
		$urlParam = array (
				'getTree',
				$maxLevel 
		);
		$url = implode ( '/', $urlParam );
		return $this->get ( self::SERVICE_NAME, $url );
	}
	/**
	 *
	 * @param unknown $params        	
	 */
	public function getCount($params) {
		$urlParam = array (
				'count' 
		);
		$url = implode ( '/', $urlParam );
		return $this->post ( self::SERVICE_NAME, $url, $params, 'application/json;charset=UTF-8' );
	}
	public function getDevice($id) {
		$urlParam = array (
				'get',
				$id 
		);
		$url = implode ( '/', $urlParam );
		return $this->get ( self::SERVICE_NAME, $url );
	}
	public function judgeFirstNo($firstNo, $id) {
		$urlParam = array (
				'judgeFirstNo',
				$firstNo,
				$id 
		);
		$url = implode ( '/', $urlParam );
		return $this->get ( self::SERVICE_NAME, $url );
	}
	public function judgeSecondNo($firstNo, $secondNo, $id) {
		$urlParam = array (
				'judgeSecondNo',
				$firstNo,
				$secondNo,
				$id 
		);
		$url = implode ( '/', $urlParam );
		return $this->get ( self::SERVICE_NAME, $url );
	}
	public function judgeDeviceName($param) {
		$urlParam = array (
				'judgeDeviceName',
		);
		$url = implode ( '/', $urlParam );
		return $this->post ( self::SERVICE_NAME, $url, $param,'application/json;charset=UTF-8');
	}
	public function isExistDevice($param) {
		$urlParam = array (
				'isExistDevice',
		);
		$url = implode ( '/', $urlParam );
		return $this->post ( self::SERVICE_NAME, $url, $param,'application/json;charset=UTF-8');
	}
}